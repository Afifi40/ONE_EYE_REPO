
pc_bridge_uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000039c  00000430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800064  00800064  00000434  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7d  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e7  00000000  00000000  000012e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000754  00000000  00000000  00001bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b5  00000000  00000000  00002488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000526  00000000  00000000  0000293d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002e63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  8a:	0c 94 cc 01 	jmp	0x398	; 0x398 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
#include "ADC.h"


void ADC_init()
{	
	ADCSRA = 0x87;			/* Enable ADC, fr/128  */
  92:	87 e8       	ldi	r24, 0x87	; 135
  94:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;			/* Vref: Avcc, ADC channel: 0 */
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	87 b9       	out	0x07, r24	; 7
  9a:	08 95       	ret

0000009c <hardware_init>:

    
}

void hardware_init(uint8_t lab_number){
	switch(lab_number){
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	19 f0       	breq	.+6      	; 0xa6 <hardware_init+0xa>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	79 f0       	breq	.+30     	; 0xc2 <hardware_init+0x26>
  a4:	08 95       	ret
		case 2:
			DDRA = 255;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a bb       	out	0x1a, r24	; 26
			UART_init(9600);
  aa:	60 e8       	ldi	r22, 0x80	; 128
  ac:	75 e2       	ldi	r23, 0x25	; 37
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 7e 00 	call	0xfc	; 0xfc <UART_init>
			ADC_init();
  b6:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
			PWM0_init();
  ba:	0e 94 75 00 	call	0xea	; 0xea <PWM0_init>
			sei();
  be:	78 94       	sei
			break;
  c0:	08 95       	ret
		case 3:
			DDRA|=0b111;
  c2:	8a b3       	in	r24, 0x1a	; 26
  c4:	87 60       	ori	r24, 0x07	; 7
  c6:	8a bb       	out	0x1a, r24	; 26
			UART_init(9600);
  c8:	60 e8       	ldi	r22, 0x80	; 128
  ca:	75 e2       	ldi	r23, 0x25	; 37
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 7e 00 	call	0xfc	; 0xfc <UART_init>
			sei();
  d4:	78 94       	sei
  d6:	08 95       	ret

000000d8 <lab3>:
		_delay_ms(100);
	}
}
*/
void lab3(){
	SET_BIT(PORTA,2);
  d8:	8b b3       	in	r24, 0x1b	; 27
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	8b bb       	out	0x1b, r24	; 27
	hardware_init(3);
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	0e 94 4e 00 	call	0x9c	; 0x9c <hardware_init>
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <lab3+0xc>

000000e6 <main>:
void lab2();
void lab3();
int main(void)
{
	//lab2(); //Needs to be Tested
	lab3(); //Work in progress
  e6:	0e 94 6c 00 	call	0xd8	; 0xd8 <lab3>

000000ea <PWM0_init>:
 *  Author: ahmed
 */ 
#include "Timer.h"

void PWM0_init(){
		SET_BIT(DDRB,3);
  ea:	87 b3       	in	r24, 0x17	; 23
  ec:	88 60       	ori	r24, 0x08	; 8
  ee:	87 bb       	out	0x17, r24	; 23
	    TCCR0=0b01110101; //Configure TCCR0 as explained in the article
  f0:	85 e7       	ldi	r24, 0x75	; 117
  f2:	83 bf       	out	0x33, r24	; 51
	    TIMSK=0b00000000;
  f4:	19 be       	out	0x39, r1	; 57
	    OCR0=255; // Set OCR0 to 255 so that the duty cycle is initially 0 and the motor is not rotating	    	
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	8c bf       	out	0x3c, r24	; 60
  fa:	08 95       	ret

000000fc <UART_init>:
}
*/
uint8_t UART_IsTxComplete(void)
	{
		return GET_BIT(UCSRA,TXC);
	}
  fc:	21 b3       	in	r18, 0x11	; 17
  fe:	22 60       	ori	r18, 0x02	; 2
 100:	21 bb       	out	0x11, r18	; 17
 102:	dc 01       	movw	r26, r24
 104:	cb 01       	movw	r24, r22
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	aa 1f       	adc	r26, r26
 10c:	bb 1f       	adc	r27, r27
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	aa 1f       	adc	r26, r26
 114:	bb 1f       	adc	r27, r27
 116:	9c 01       	movw	r18, r24
 118:	ad 01       	movw	r20, r26
 11a:	22 0f       	add	r18, r18
 11c:	33 1f       	adc	r19, r19
 11e:	44 1f       	adc	r20, r20
 120:	55 1f       	adc	r21, r21
 122:	22 0f       	add	r18, r18
 124:	33 1f       	adc	r19, r19
 126:	44 1f       	adc	r20, r20
 128:	55 1f       	adc	r21, r21
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	74 e2       	ldi	r23, 0x24	; 36
 12e:	84 ef       	ldi	r24, 0xF4	; 244
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 aa 01 	call	0x354	; 0x354 <__udivmodsi4>
 136:	21 50       	subi	r18, 0x01	; 1
 138:	31 09       	sbc	r19, r1
 13a:	30 bd       	out	0x20, r19	; 32
 13c:	29 b9       	out	0x09, r18	; 9
 13e:	8a b1       	in	r24, 0x0a	; 10
 140:	88 60       	ori	r24, 0x08	; 8
 142:	8a b9       	out	0x0a, r24	; 10
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	80 61       	ori	r24, 0x10	; 16
 148:	8a b9       	out	0x0a, r24	; 10
 14a:	8a b1       	in	r24, 0x0a	; 10
 14c:	80 6c       	ori	r24, 0xC0	; 192
 14e:	8a b9       	out	0x0a, r24	; 10
 150:	78 94       	sei
 152:	08 95       	ret

00000154 <UART_Transmit_Char>:
 154:	5d 9b       	sbis	0x0b, 5	; 11
 156:	fe cf       	rjmp	.-4      	; 0x154 <UART_Transmit_Char>
 158:	8c b9       	out	0x0c, r24	; 12
 15a:	08 95       	ret

0000015c <__vector_11>:
	static volatile uint8_t  rx_buffer[4];
	static volatile uint16_t rx_len=4;
	static volatile uint16_t rx_cnt=4;
	static volatile uint8_t *r ;
	ISR(USART_RXC_vect)
	{
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	2f 93       	push	r18
 168:	3f 93       	push	r19
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	6f 93       	push	r22
 170:	7f 93       	push	r23
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
 178:	bf 93       	push	r27
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
		cli();
 17e:	f8 94       	cli
		uint8_t rx_data, readFrom = STOP;
		
		/* Read rx_data. */
		rx_data = UDR;
 180:	8c b1       	in	r24, 0x0c	; 12
		if(rx_data == '@'){
 182:	80 34       	cpi	r24, 0x40	; 64
 184:	29 f4       	brne	.+10     	; 0x190 <__vector_11+0x34>
			rx_cnt=0;
 186:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 18a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 18e:	d0 c0       	rjmp	.+416    	; 0x330 <__EEPROM_REGION_LENGTH__+0x130>
			readFrom = RAM;
		}
		else if(rx_data == '<'){
 190:	8c 33       	cpi	r24, 0x3C	; 60
 192:	29 f4       	brne	.+10     	; 0x19e <__vector_11+0x42>
			rx_cnt=0;
 194:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 198:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 19c:	c9 c0       	rjmp	.+402    	; 0x330 <__EEPROM_REGION_LENGTH__+0x130>
			readFrom = ROM;
		}
		else if((rx_cnt < rx_len) && (rx_data != ' '))/* Ignore spaces */
 19e:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a2:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1a6:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <rx_len>
 1aa:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <rx_len+0x1>
 1ae:	42 17       	cp	r20, r18
 1b0:	53 07       	cpc	r21, r19
 1b2:	90 f4       	brcc	.+36     	; 0x1d8 <__vector_11+0x7c>
 1b4:	80 32       	cpi	r24, 0x20	; 32
 1b6:	81 f0       	breq	.+32     	; 0x1d8 <__vector_11+0x7c>
			rx_buffer[rx_cnt++] = rx_data;
 1b8:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1bc:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1c0:	a9 01       	movw	r20, r18
 1c2:	4f 5f       	subi	r20, 0xFF	; 255
 1c4:	5f 4f       	sbci	r21, 0xFF	; 255
 1c6:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ca:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ce:	f9 01       	movw	r30, r18
 1d0:	ec 59       	subi	r30, 0x9C	; 156
 1d2:	ff 4f       	sbci	r31, 0xFF	; 255
 1d4:	80 83       	st	Z, r24
 1d6:	ac c0       	rjmp	.+344    	; 0x330 <__EEPROM_REGION_LENGTH__+0x130>
			
		else if(rx_data == ';' && rx_cnt==rx_len)
 1d8:	8b 33       	cpi	r24, 0x3B	; 59
 1da:	09 f0       	breq	.+2      	; 0x1de <__vector_11+0x82>
 1dc:	a9 c0       	rjmp	.+338    	; 0x330 <__EEPROM_REGION_LENGTH__+0x130>
 1de:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e2:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <rx_len>
 1ea:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <rx_len+0x1>
 1ee:	28 17       	cp	r18, r24
 1f0:	39 07       	cpc	r19, r25
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <__vector_11+0x9a>
 1f4:	9d c0       	rjmp	.+314    	; 0x330 <__EEPROM_REGION_LENGTH__+0x130>
		{
			SET_BIT(PORTA,1);
 1f6:	8b b3       	in	r24, 0x1b	; 27
 1f8:	82 60       	ori	r24, 0x02	; 2
 1fa:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	83 ec       	ldi	r24, 0xC3	; 195
 200:	99 e0       	ldi	r25, 0x09	; 9
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
 20c:	00 00       	nop
			_delay_ms(200);
			CLR_BIT(PORTA,1);
 20e:	8b b3       	in	r24, 0x1b	; 27
 210:	8d 7f       	andi	r24, 0xFD	; 253
 212:	8b bb       	out	0x1b, r24	; 27
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	83 ec       	ldi	r24, 0xC3	; 195
 218:	99 e0       	ldi	r25, 0x09	; 9
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 222:	00 c0       	rjmp	.+0      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 224:	00 00       	nop
			_delay_ms(200);
			switch (rx_buffer[0]){
 226:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	49 f0       	breq	.+18     	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
 22e:	18 f0       	brcs	.+6      	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	19 f1       	breq	.+70     	; 0x27a <__EEPROM_REGION_LENGTH__+0x7a>
 234:	53 c0       	rjmp	.+166    	; 0x2dc <__EEPROM_REGION_LENGTH__+0xdc>
				case RESET:
						rx_cnt = 0;
 236:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 23a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
						readFrom  = STOP;
						break;
 23e:	51 c0       	rjmp	.+162    	; 0x2e2 <__EEPROM_REGION_LENGTH__+0xe2>
				
				case READ:
					SET_BIT(PORTA,2);
 240:	8b b3       	in	r24, 0x1b	; 27
 242:	84 60       	ori	r24, 0x04	; 4
 244:	8b bb       	out	0x1b, r24	; 27
 246:	2f ef       	ldi	r18, 0xFF	; 255
 248:	83 ec       	ldi	r24, 0xC3	; 195
 24a:	99 e0       	ldi	r25, 0x09	; 9
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
 254:	00 c0       	rjmp	.+0      	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
 256:	00 00       	nop
					_delay_ms(200);
					CLR_BIT(PORTA,2);
 258:	8b b3       	in	r24, 0x1b	; 27
 25a:	8b 7f       	andi	r24, 0xFB	; 251
 25c:	8b bb       	out	0x1b, r24	; 27
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	83 ec       	ldi	r24, 0xC3	; 195
 262:	99 e0       	ldi	r25, 0x09	; 9
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <__EEPROM_REGION_LENGTH__+0x6e>
 26e:	00 00       	nop
					if(readFrom==RAM)
						*r = _MEM((uint16_t)rx_buffer[1]);
					else if(readFrom==ROM){						
						*r = eeprom_read((uint16_t)rx_buffer[1]);
					}
					UART_Transmit_Char(*r);
 270:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7fc000>
 274:	0e 94 aa 00 	call	0x154	; 0x154 <UART_Transmit_Char>
					break;
 278:	34 c0       	rjmp	.+104    	; 0x2e2 <__EEPROM_REGION_LENGTH__+0xe2>
				
				case WRITE:
					SET_BIT(PORTA,2);
 27a:	8b b3       	in	r24, 0x1b	; 27
 27c:	84 60       	ori	r24, 0x04	; 4
 27e:	8b bb       	out	0x1b, r24	; 27
 280:	2f ef       	ldi	r18, 0xFF	; 255
 282:	83 ec       	ldi	r24, 0xC3	; 195
 284:	99 e0       	ldi	r25, 0x09	; 9
 286:	21 50       	subi	r18, 0x01	; 1
 288:	80 40       	sbci	r24, 0x00	; 0
 28a:	90 40       	sbci	r25, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>
 290:	00 00       	nop
					_delay_ms(200);
					CLR_BIT(PORTA,2);
 292:	8b b3       	in	r24, 0x1b	; 27
 294:	8b 7f       	andi	r24, 0xFB	; 251
 296:	8b bb       	out	0x1b, r24	; 27
 298:	2f ef       	ldi	r18, 0xFF	; 255
 29a:	83 ec       	ldi	r24, 0xC3	; 195
 29c:	99 e0       	ldi	r25, 0x09	; 9
 29e:	21 50       	subi	r18, 0x01	; 1
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	90 40       	sbci	r25, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <__EEPROM_REGION_LENGTH__+0x9e>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
 2a8:	00 00       	nop
					_delay_ms(200);
					if(readFrom==RAM)
						_MEM((uint16_t)rx_buffer[1]) = rx_buffer[3];
					else if(readFrom==ROM)
						eeprom_write((uint16_t)rx_buffer[1],  rx_buffer[3]);
						SET_BIT(PORTA,1);
 2aa:	8b b3       	in	r24, 0x1b	; 27
 2ac:	82 60       	ori	r24, 0x02	; 2
 2ae:	8b bb       	out	0x1b, r24	; 27
 2b0:	2f ef       	ldi	r18, 0xFF	; 255
 2b2:	83 ec       	ldi	r24, 0xC3	; 195
 2b4:	99 e0       	ldi	r25, 0x09	; 9
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <__EEPROM_REGION_LENGTH__+0xc0>
 2c0:	00 00       	nop
						_delay_ms(200);
						CLR_BIT(PORTA,1);
 2c2:	8b b3       	in	r24, 0x1b	; 27
 2c4:	8d 7f       	andi	r24, 0xFD	; 253
 2c6:	8b bb       	out	0x1b, r24	; 27
 2c8:	2f ef       	ldi	r18, 0xFF	; 255
 2ca:	83 ec       	ldi	r24, 0xC3	; 195
 2cc:	99 e0       	ldi	r25, 0x09	; 9
 2ce:	21 50       	subi	r18, 0x01	; 1
 2d0:	80 40       	sbci	r24, 0x00	; 0
 2d2:	90 40       	sbci	r25, 0x00	; 0
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <__EEPROM_REGION_LENGTH__+0xce>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <__EEPROM_REGION_LENGTH__+0xd8>
 2d8:	00 00       	nop
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <__EEPROM_REGION_LENGTH__+0xe2>
						_delay_ms(200);
					break;
				
				default:  //Wrong Command Number
					UART_Transmit_Char('E');
 2dc:	85 e4       	ldi	r24, 0x45	; 69
 2de:	0e 94 aa 00 	call	0x154	; 0x154 <UART_Transmit_Char>
					break;
			}
			
			/*Indication that Data has been received*/
			SET_BIT(PORTA,0);
 2e2:	8b b3       	in	r24, 0x1b	; 27
 2e4:	81 60       	ori	r24, 0x01	; 1
 2e6:	8b bb       	out	0x1b, r24	; 27
 2e8:	2f ef       	ldi	r18, 0xFF	; 255
 2ea:	83 ec       	ldi	r24, 0xC3	; 195
 2ec:	99 e0       	ldi	r25, 0x09	; 9
 2ee:	21 50       	subi	r18, 0x01	; 1
 2f0:	80 40       	sbci	r24, 0x00	; 0
 2f2:	90 40       	sbci	r25, 0x00	; 0
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <__EEPROM_REGION_LENGTH__+0xee>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <__EEPROM_REGION_LENGTH__+0xf8>
 2f8:	00 00       	nop
			_delay_ms(200);
			CLR_BIT(PORTA,0);
 2fa:	8b b3       	in	r24, 0x1b	; 27
 2fc:	8e 7f       	andi	r24, 0xFE	; 254
 2fe:	8b bb       	out	0x1b, r24	; 27
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	83 ec       	ldi	r24, 0xC3	; 195
 304:	99 e0       	ldi	r25, 0x09	; 9
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <__EEPROM_REGION_LENGTH__+0x106>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <__EEPROM_REGION_LENGTH__+0x110>
 310:	00 00       	nop
			_delay_ms(200);
			SET_BIT(PORTA,0);
 312:	8b b3       	in	r24, 0x1b	; 27
 314:	81 60       	ori	r24, 0x01	; 1
 316:	8b bb       	out	0x1b, r24	; 27
 318:	2f ef       	ldi	r18, 0xFF	; 255
 31a:	83 ec       	ldi	r24, 0xC3	; 195
 31c:	99 e0       	ldi	r25, 0x09	; 9
 31e:	21 50       	subi	r18, 0x01	; 1
 320:	80 40       	sbci	r24, 0x00	; 0
 322:	90 40       	sbci	r25, 0x00	; 0
 324:	e1 f7       	brne	.-8      	; 0x31e <__EEPROM_REGION_LENGTH__+0x11e>
 326:	00 c0       	rjmp	.+0      	; 0x328 <__EEPROM_REGION_LENGTH__+0x128>
 328:	00 00       	nop
			_delay_ms(200);
			CLR_BIT(PORTA,0);
 32a:	8b b3       	in	r24, 0x1b	; 27
 32c:	8e 7f       	andi	r24, 0xFE	; 254
 32e:	8b bb       	out	0x1b, r24	; 27
		}
		sei();
 330:	78 94       	sei
	}
 332:	ff 91       	pop	r31
 334:	ef 91       	pop	r30
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	7f 91       	pop	r23
 340:	6f 91       	pop	r22
 342:	5f 91       	pop	r21
 344:	4f 91       	pop	r20
 346:	3f 91       	pop	r19
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <__udivmodsi4>:
 354:	a1 e2       	ldi	r26, 0x21	; 33
 356:	1a 2e       	mov	r1, r26
 358:	aa 1b       	sub	r26, r26
 35a:	bb 1b       	sub	r27, r27
 35c:	fd 01       	movw	r30, r26
 35e:	0d c0       	rjmp	.+26     	; 0x37a <__udivmodsi4_ep>

00000360 <__udivmodsi4_loop>:
 360:	aa 1f       	adc	r26, r26
 362:	bb 1f       	adc	r27, r27
 364:	ee 1f       	adc	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	a2 17       	cp	r26, r18
 36a:	b3 07       	cpc	r27, r19
 36c:	e4 07       	cpc	r30, r20
 36e:	f5 07       	cpc	r31, r21
 370:	20 f0       	brcs	.+8      	; 0x37a <__udivmodsi4_ep>
 372:	a2 1b       	sub	r26, r18
 374:	b3 0b       	sbc	r27, r19
 376:	e4 0b       	sbc	r30, r20
 378:	f5 0b       	sbc	r31, r21

0000037a <__udivmodsi4_ep>:
 37a:	66 1f       	adc	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	88 1f       	adc	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	1a 94       	dec	r1
 384:	69 f7       	brne	.-38     	; 0x360 <__udivmodsi4_loop>
 386:	60 95       	com	r22
 388:	70 95       	com	r23
 38a:	80 95       	com	r24
 38c:	90 95       	com	r25
 38e:	9b 01       	movw	r18, r22
 390:	ac 01       	movw	r20, r24
 392:	bd 01       	movw	r22, r26
 394:	cf 01       	movw	r24, r30
 396:	08 95       	ret

00000398 <_exit>:
 398:	f8 94       	cli

0000039a <__stop_program>:
 39a:	ff cf       	rjmp	.-2      	; 0x39a <__stop_program>
